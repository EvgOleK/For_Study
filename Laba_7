#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <cstdint>
#include <windows.h>


bool readLine(std::string& input, const std::string& prompt)
{
    std::cout << prompt;
    return static_cast<bool>(std::getline(std::cin, input));
}

int32_t countWords(const std::string& line)
{
    int32_t count{};
    bool inWord = false;
    for (std::size_t i{}; i < line.size(); ++i)
    {
        if (line[i] != ' ')
        {
            if (!inWord)
            {
                inWord = true;
                ++count;
            }
        }
        else
        {
            inWord = false;
        }
    }
    return count;
}

void splitString(const std::string& input, std::string* words, int32_t wordCount)
{
    int32_t index{};
    std::size_t i{};
    while (i < input.size())
    {
        while (i < input.size() && input[i] == ' ')
        {
            ++i;
        }
        if (i >= input.size())
        {
            break;
        }
        std::string word = "";
        while (i < input.size() && input[i] != ' ')
        {
            word.push_back(input[i]);
            ++i;
        }
        if (index < wordCount)
        {
            words[index] = word;
            ++index;
        }
    }
}

bool isDigitsOnly(const std::string& s)
{
    if (s.empty())
    {
        return false;
    }
    for (std::size_t i{}; i < s.size(); ++i)
    {
        if (s[i] < '0' || s[i] > '9')
        {
            return false;
        }
    }
    return true;
}

int32_t countZeros(const std::string& s)
{
    int32_t count{};
    for (std::size_t i{}; i < s.size(); ++i)
    {
        if (s[i] == '0')
        {
            ++count;
        }
    }
    return count;
}

std::string findCandidate(const std::string* words, int32_t totalWords)
{
    int32_t maxZeros{-1};
    std::string lastCandidate = "";
    std::string penultimateCandidate = "";
    int32_t candidateCount{};
    for (int32_t i{}; i < totalWords; ++i)
    {
        if (isDigitsOnly(words[i]))
        {
            int32_t zeros = countZeros(words[i]);
            if (zeros > maxZeros)
            {
                maxZeros = zeros;
                penultimateCandidate = "";
                lastCandidate = words[i];
                candidateCount = 1;
            }
            else if (zeros == maxZeros)
            {
                penultimateCandidate = lastCandidate;
                lastCandidate = words[i];
                ++candidateCount;
            }
        }
    }
    if (maxZeros == -1)
    {
        return "";
    }
    if (candidateCount > 1)
    {
        return penultimateCandidate;
    }
    else
    {
        return lastCandidate;
    }
}

void printResult(const std::string& result)
{
    if (result.empty())
    {
        std::cout << "Задачу решить невозможно.\n";
    }
    else
    {
        std::cout << "Слово с максимальным числом нулей: " << result << "\n";
    }
}

int main()
{
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);

    std::string input;
    if (!readLine(input, "Введите строку: "))
    {
        std::cout << "Ошибка чтения строки.\n";
        return 1;
    }

    bool hasNonSpace = false;
    for (std::size_t i{}; i < input.size(); ++i)
    {
        if (input[i] != ' ')
        {
            hasNonSpace = true;
            break;
        }
    }

    if (!hasNonSpace)
    {
        std::cout << "Строка пуста. Задачу решить невозможно.\n";
        return 1;
    }

    int32_t totalWords = countWords(input);
    if (totalWords == 0)
    {
        std::cout << "Нет слов в строке.\n";
        return 1;
    }

    std::string* words = new std::string[totalWords];
    splitString(input, words, totalWords);
    std::string candidate = findCandidate(words, totalWords);
    printResult(candidate);

    delete[] words;

    return 0;
}
